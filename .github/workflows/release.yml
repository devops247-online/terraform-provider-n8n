name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

env:
  GO_VERSION: '1.23.10'

jobs:
  # Run all checks before releasing
  pre-release-checks:
    name: Pre-release Checks
    runs-on: ubuntu-latest

    steps:
    - name: Check out code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ env.GO_VERSION }}-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-${{ env.GO_VERSION }}-
          ${{ runner.os }}-go-

    - name: Download dependencies
      run: go mod download

    - name: Install development tools
      run: make tools

    - name: Run all pre-release checks
      run: make pre-release

  # Build and release
  release:
    name: Release
    runs-on: ubuntu-latest
    needs: pre-release-checks

    steps:
    - name: Check out code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ env.GO_VERSION }}-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-${{ env.GO_VERSION }}-
          ${{ runner.os }}-go-

    - name: Download dependencies
      run: go mod download

    - name: Install tfplugindocs
      run: go install github.com/hashicorp/terraform-plugin-docs/cmd/tfplugindocs@latest

    - name: Generate documentation
      run: make docs

    - name: Check repository workflow permissions
      run: |
        echo "Verifying repository workflow permissions..."
        echo "If this workflow fails with 403 errors, check:"
        echo "1. Repository Settings > Actions > General > Workflow permissions"
        echo "2. Ensure 'Read and write permissions' is selected"
        echo "3. Consider using a Personal Access Token if organization restricts GITHUB_TOKEN"

    - name: Import GPG key
      uses: crazy-max/ghaction-import-gpg@v6
      id: import_gpg
      with:
        gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
        passphrase: ${{ secrets.GPG_PASSPHRASE }}

    - name: Run GoReleaser (Primary Method)
      id: goreleaser
      uses: goreleaser/goreleaser-action@v4
      continue-on-error: true
      with:
        distribution: goreleaser
        version: latest
        args: release --clean
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GPG_FINGERPRINT: ${{ steps.import_gpg.outputs.fingerprint }}

    - name: Check GoReleaser result
      id: check_release
      run: |
        if [ "${{ steps.goreleaser.outcome }}" == "success" ]; then
          echo "GoReleaser succeeded"
          echo "release_method=goreleaser" >> $GITHUB_OUTPUT
          echo "release_created=true" >> $GITHUB_OUTPUT
        else
          echo "GoReleaser failed, checking if release was created..."
          # Check if release exists (GoReleaser might have created it despite failing)
          if gh release view ${{ github.ref_name }} >/dev/null 2>&1; then
            echo "Release exists despite GoReleaser failure"
            echo "release_method=goreleaser_partial" >> $GITHUB_OUTPUT
            echo "release_created=true" >> $GITHUB_OUTPUT
          else
            echo "No release found, will use fallback method"
            echo "release_method=none" >> $GITHUB_OUTPUT
            echo "release_created=false" >> $GITHUB_OUTPUT
          fi
        fi
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Create Release (Fallback Method)
      if: steps.check_release.outputs.release_created == 'false'
      uses: softprops/action-gh-release@v1
      with:
        draft: false
        prerelease: false
        generate_release_notes: true
        files: |
          dist/*.zip
          dist/*_SHA256SUMS
          dist/*_SHA256SUMS.sig
        body: |
          ## üéâ Release ${{ github.ref_name }}

          This release was created using fallback method due to organization GitHub token restrictions.

          ### üì¶ Assets
          - Multi-platform binaries for Linux, macOS, Windows, FreeBSD
          - SHA256 checksums with GPG signatures
          - Full source code

          ### üîß Installation
          ```hcl
          terraform {
            required_providers {
              n8n = {
                source  = "devops247-online/n8n"
                version = "${{ github.ref_name }}"
              }
            }
          }
          ```

          For issues, visit: https://github.com/devops247-online/terraform-provider-n8n/issues

    - name: Report Release Method
      run: |
        case "${{ steps.check_release.outputs.release_method }}" in
          "goreleaser")
            echo "‚úÖ Release created successfully using GoReleaser"
            ;;
          "goreleaser_partial")
            echo "‚ö†Ô∏è  Release created by GoReleaser but with warnings"
            ;;
          "none")
            echo "‚úÖ Release created successfully using fallback method"
            echo "üí° Consider setting up a Personal Access Token for smoother releases"
            ;;
        esac

  # Test the published release
  post-release-test:
    name: Post-release Test
    runs-on: ubuntu-latest
    needs: release
    if: always() && needs.release.result == 'success'

    steps:
    - name: Check out code
      uses: actions/checkout@v4

    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: latest

    - name: Extract version from tag
      id: version
      run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

    - name: Wait for registry propagation
      run: |
        echo "Waiting for provider to propagate to Terraform Registry..."
        echo "This may take a few minutes for new releases..."
        sleep 60

    - name: Test provider installation
      working-directory: examples/basic
      run: |
        # Update the version in existing main.tf instead of creating duplicate versions.tf
        sed -i 's/version = "~> 1.0"/version = "${{ steps.version.outputs.VERSION }}"/' main.tf

        # Verify the change was made
        echo "Updated main.tf version configuration:"
        grep -A 5 "required_providers" main.tf

        # Try terraform init with retries for registry propagation
        for i in {1..3}; do
          echo "Attempt $i of 3..."
          if terraform init; then
            echo "‚úÖ Terraform init succeeded"
            break
          else
            if [ $i -eq 3 ]; then
              echo "‚ùå Terraform init failed after 3 attempts"
              echo "This might be due to registry propagation delays"
              exit 1
            else
              echo "‚è≥ Waiting 30 seconds before retry..."
              sleep 30
            fi
          fi
        done

        terraform validate
        echo "‚úÖ Provider installation and validation successful"
