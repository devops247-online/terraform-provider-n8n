name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write
  actions: read
  checks: read
  pull-requests: read
  repository-projects: read
  issues: write
  statuses: read

env:
  GO_VERSION: '1.23.4'

jobs:
  # Run all checks before releasing
  pre-release-checks:
    name: Pre-release Checks
    runs-on: ubuntu-latest

    steps:
    - name: Check out code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ env.GO_VERSION }}-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-${{ env.GO_VERSION }}-
          ${{ runner.os }}-go-

    - name: Download dependencies
      run: go mod download

    - name: Install development tools
      run: make tools

    - name: Run all pre-release checks
      run: make pre-release

  # Build and release
  release:
    name: Release
    runs-on: ubuntu-latest
    needs: pre-release-checks

    steps:
    - name: Check out code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ env.GO_VERSION }}-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-${{ env.GO_VERSION }}-
          ${{ runner.os }}-go-

    - name: Download dependencies
      run: go mod download

    - name: Install tfplugindocs
      run: go install github.com/hashicorp/terraform-plugin-docs/cmd/tfplugindocs@latest

    - name: Generate documentation
      run: make docs

    - name: Import GPG key
      uses: crazy-max/ghaction-import-gpg@v5
      id: import_gpg
      with:
        gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
        passphrase: ${{ secrets.GPG_PASSPHRASE }}

    - name: Run GoReleaser
      uses: goreleaser/goreleaser-action@v4
      with:
        distribution: goreleaser
        version: latest
        args: release --clean
      env:
        GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}
        GPG_FINGERPRINT: ${{ steps.import_gpg.outputs.fingerprint }}

  # Test the published release
  post-release-test:
    name: Post-release Test
    runs-on: ubuntu-latest
    needs: release

    steps:
    - name: Check out code
      uses: actions/checkout@v4

    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: latest

    - name: Extract version from tag
      id: version
      run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

    - name: Test provider installation
      working-directory: examples/basic
      run: |
        # Update the version in existing main.tf instead of creating duplicate versions.tf
        sed -i 's/version = "~> 1.0"/version = "${{ steps.version.outputs.VERSION }}"/' main.tf

        # Verify the change was made
        echo "Updated main.tf version configuration:"
        grep -A 5 "required_providers" main.tf

        terraform init
        terraform validate
