name: Test

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  GO_VERSION: '1.23.7'

jobs:
  # Unit and integration tests
  test:
    name: Unit Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: ['1.23.7', '1.23.x']
    
    steps:
    - name: Check out code
      uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ matrix.go-version }}
    
    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-test-${{ matrix.go-version }}-${{ hashFiles('**/go.sum') }}-v2
        restore-keys: |
          ${{ runner.os }}-go-test-${{ matrix.go-version }}-
          ${{ runner.os }}-go-test-
    
    - name: Download dependencies
      run: go mod download
    
    - name: Verify dependencies
      run: go mod verify
    
    - name: Run unit tests
      run: make test
    
    - name: Generate coverage report
      run: go test -v -coverprofile=coverage.out -covermode=atomic ./...
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.out
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  # Code quality checks
  quality:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: Check out code
      uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
    
    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-quality-${{ env.GO_VERSION }}-${{ hashFiles('**/go.sum') }}-v2
        restore-keys: |
          ${{ runner.os }}-go-quality-${{ env.GO_VERSION }}-
          ${{ runner.os }}-go-quality-
    
    - name: Download dependencies
      run: go mod download
    
    - name: Install development tools
      run: make tools
    
    - name: Check formatting
      run: |
        make fmt
        if [ -n "$(git diff --name-only)" ]; then
          echo "The following files are not formatted:"
          git diff --name-only
          exit 1
        fi
    
    - name: Run go vet
      run: make vet
    
    - name: Run golangci-lint
      uses: golangci/golangci-lint-action@v3
      with:
        version: latest
        args: --timeout=5m
    
    - name: Run gosec security scanner
      uses: securego/gosec@master
      with:
        args: '-no-fail -fmt sarif -out gosec.sarif ./...'
    
    - name: Upload SARIF file
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: gosec.sarif

  # Acceptance tests with multiple n8n versions
  acceptance:
    name: Acceptance Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        n8n-version: ['1.1.0', 'latest']
      fail-fast: false
    
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: n8n
          POSTGRES_USER: n8n
          POSTGRES_DB: n8n
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
    - name: Check out code
      uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
    
    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-acceptance-${{ env.GO_VERSION }}-${{ hashFiles('**/go.sum') }}-v2
        restore-keys: |
          ${{ runner.os }}-go-acceptance-${{ env.GO_VERSION }}-
          ${{ runner.os }}-go-acceptance-
    
    - name: Download dependencies
      run: go mod download
    
    - name: Wait for PostgreSQL to be ready
      run: |
        echo "Waiting for PostgreSQL to be ready..."
        timeout 60s bash -c '
          until pg_isready -h localhost -p 5432 -U n8n -d n8n; do
            echo "PostgreSQL not ready yet, waiting..."
            sleep 2
          done
        '
        echo "‚úÖ PostgreSQL is ready!"
    
    - name: Start n8n
      run: |
        echo "Starting n8n version: ${{ matrix.n8n-version }}"
        docker run -d \
          --name n8n \
          -p 5678:5678 \
          --network host \
          -e DB_TYPE=postgresdb \
          -e DB_POSTGRESDB_HOST=localhost \
          -e DB_POSTGRESDB_PORT=5432 \
          -e DB_POSTGRESDB_DATABASE=n8n \
          -e DB_POSTGRESDB_USER=n8n \
          -e DB_POSTGRESDB_PASSWORD=n8n \
          -e N8N_API_KEY=test-api-key \
          -e N8N_METRICS=true \
          -e QUEUE_HEALTH_CHECK_ACTIVE=true \
          -e EXECUTIONS_DATA_SAVE_ON_SUCCESS=none \
          -e EXECUTIONS_DATA_SAVE_ON_ERROR=none \
          -e EXECUTIONS_DATA_SAVE_MANUAL_EXECUTIONS=false \
          -e N8N_LOG_LEVEL=debug \
          n8nio/n8n:${{ matrix.n8n-version }}
        
        echo "n8n container started, checking status..."
        docker ps -a
        echo "Checking n8n logs for any startup issues..."
        sleep 5
        docker logs n8n
    
    - name: Wait for n8n to be ready
      run: |
        echo "Waiting for n8n to start up..."
        timeout 300s bash -c '
          attempt=0
          max_attempts=100
          while [ $attempt -lt $max_attempts ]; do
            attempt=$((attempt + 1))
            echo "Health check attempt $attempt/$max_attempts..."
            
            # Check if container is still running
            if ! docker ps --format "table {{.Names}}" | grep -q "^n8n$"; then
              echo "‚ùå n8n container is not running!"
              docker ps -a
              echo "Container logs:"
              docker logs n8n
              exit 1
            fi
            
            # Try primary health check endpoint
            if curl -f -s http://localhost:5678/healthz >/dev/null 2>&1; then
              echo "‚úÖ n8n health check passed!"
              exit 0
            fi
            
            # Try alternative health check endpoint
            if curl -f -s http://localhost:5678/healthz/readiness >/dev/null 2>&1; then
              echo "‚úÖ n8n readiness check passed!"
              exit 0
            fi
            
            # Try basic HTTP check (for older versions without health endpoints)
            if curl -f -s http://localhost:5678/ >/dev/null 2>&1; then
              echo "‚úÖ n8n HTTP check passed!"
              exit 0
            fi
            
            # Try API endpoint check
            if curl -f -s -H "X-N8N-API-KEY: test-api-key" http://localhost:5678/api/v1/workflows >/dev/null 2>&1; then
              echo "‚úÖ n8n API check passed!"
              exit 0
            fi
            
            # Show container status and logs more frequently for debugging
            if [ $((attempt % 5)) -eq 0 ]; then
              echo "üîç Container status after $attempt attempts:"
              docker ps -a
              echo "üîç Recent n8n logs:"
              docker logs --tail 20 n8n
            fi
            
            sleep 3
          done
          
          echo "‚ùå n8n failed to become ready after $max_attempts attempts"
          echo "Final container status:"
          docker ps -a
          echo "Final n8n logs:"
          docker logs n8n
          exit 1
        '
    
    - name: Run acceptance tests
      env:
        TF_ACC: 1
        N8N_BASE_URL: http://localhost:5678
        N8N_API_KEY: test-api-key
      run: make testacc
    
    - name: Stop n8n
      if: always()
      run: docker stop n8n && docker rm n8n

  # Documentation validation
  docs:
    name: Documentation
    runs-on: ubuntu-latest
    
    steps:
    - name: Check out code
      uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
    
    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-docs-${{ env.GO_VERSION }}-${{ hashFiles('**/go.sum') }}-v2
        restore-keys: |
          ${{ runner.os }}-go-docs-${{ env.GO_VERSION }}-
          ${{ runner.os }}-go-docs-
    
    - name: Download dependencies
      run: go mod download
    
    - name: Install tfplugindocs
      run: go install github.com/hashicorp/terraform-plugin-docs/cmd/tfplugindocs@latest
    
    - name: Install Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.0.0
    
    - name: Generate documentation
      run: make docs
    
    - name: Check for documentation changes
      run: |
        git add docs/
        if [ -n "$(git diff --staged --name-only)" ]; then
          echo "Documentation is out of date. Please run 'make docs' and commit the changes."
          git diff --staged
          exit 1
        fi

  # Build test
  build:
    name: Build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        goos: [linux, windows, darwin]
        goarch: [amd64, arm64]
        exclude:
          - goos: windows
            goarch: arm64
    
    steps:
    - name: Check out code
      uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
    
    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-build-${{ env.GO_VERSION }}-${{ hashFiles('**/go.sum') }}-v2
        restore-keys: |
          ${{ runner.os }}-go-build-${{ env.GO_VERSION }}-
          ${{ runner.os }}-go-build-
    
    - name: Download dependencies
      run: go mod download
    
    - name: Build binary
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
      run: |
        make build
        ls -la terraform-provider-n8n*