name: Test

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  GO_VERSION: '1.23.7'

jobs:
  # Unit and integration tests
  test:
    name: Unit Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: ['1.23.7', '1.23.x']
    
    steps:
    - name: Check out code
      uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ matrix.go-version }}
    
    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-test-${{ matrix.go-version }}-${{ hashFiles('**/go.sum') }}-v2
        restore-keys: |
          ${{ runner.os }}-go-test-${{ matrix.go-version }}-
          ${{ runner.os }}-go-test-
    
    - name: Download dependencies
      run: go mod download
    
    - name: Verify dependencies
      run: go mod verify
    
    - name: Run unit tests
      run: make test
    
    - name: Generate coverage report
      run: go test -v -coverprofile=coverage.out -covermode=atomic ./...
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v5
      with:
        file: ./coverage.out
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  # Code quality checks
  quality:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: Check out code
      uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
    
    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-quality-${{ env.GO_VERSION }}-${{ hashFiles('**/go.sum') }}-v2
        restore-keys: |
          ${{ runner.os }}-go-quality-${{ env.GO_VERSION }}-
          ${{ runner.os }}-go-quality-
    
    - name: Download dependencies
      run: go mod download
    
    - name: Install development tools
      run: make tools
    
    - name: Check formatting
      run: |
        make fmt
        if [ -n "$(git diff --name-only)" ]; then
          echo "The following files are not formatted:"
          git diff --name-only
          exit 1
        fi
    
    - name: Run go vet
      run: make vet
    
    - name: Run golangci-lint
      uses: golangci/golangci-lint-action@v3
      with:
        version: latest
        args: --timeout=5m
    
    - name: Run gosec security scanner
      uses: securego/gosec@master
      with:
        args: '-no-fail -fmt sarif -out gosec.sarif ./...'
    
    - name: Upload SARIF file
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: gosec.sarif

  # Acceptance tests (skipped due to n8n licensing requirements)
  acceptance:
    name: Acceptance Tests (Skipped)
    runs-on: ubuntu-latest
    
    steps:
    - name: Check out code
      uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
    
    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-acceptance-${{ env.GO_VERSION }}-${{ hashFiles('**/go.sum') }}-v2
        restore-keys: |
          ${{ runner.os }}-go-acceptance-${{ env.GO_VERSION }}-
          ${{ runner.os }}-go-acceptance-
    
    - name: Download dependencies
      run: go mod download
    
    - name: Run acceptance tests (skipped)
      run: |
        echo "ℹ️  Acceptance tests are skipped due to n8n licensing requirements."
        echo "ℹ️  n8n requires proper user registration and API authentication setup"
        echo "ℹ️  which is not feasible in automated CI environments."
        echo ""
        echo "✅ To run acceptance tests locally:"
        echo "   1. Start a local n8n instance with proper authentication"
        echo "   2. Set environment variables: N8N_BASE_URL, N8N_API_KEY (or N8N_EMAIL/N8N_PASSWORD)"
        echo "   3. Run: make testacc"
        echo ""
        echo "✅ Running unit tests with acceptance tests skipped..."
        make test-skip-acc

  # Documentation validation
  docs:
    name: Documentation
    runs-on: ubuntu-latest
    
    steps:
    - name: Check out code
      uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
    
    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-docs-${{ env.GO_VERSION }}-${{ hashFiles('**/go.sum') }}-v2
        restore-keys: |
          ${{ runner.os }}-go-docs-${{ env.GO_VERSION }}-
          ${{ runner.os }}-go-docs-
    
    - name: Download dependencies
      run: go mod download
    
    - name: Install tfplugindocs
      run: go install github.com/hashicorp/terraform-plugin-docs/cmd/tfplugindocs@latest
    
    - name: Install Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.0.0
    
    - name: Generate documentation
      run: make docs
    
    - name: Check for documentation changes
      run: |
        git add docs/
        if [ -n "$(git diff --staged --name-only)" ]; then
          echo "Documentation is out of date. Please run 'make docs' and commit the changes."
          git diff --staged
          exit 1
        fi

  # Build test
  build:
    name: Build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        goos: [linux, windows, darwin]
        goarch: [amd64, arm64]
        exclude:
          - goos: windows
            goarch: arm64
    
    steps:
    - name: Check out code
      uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
    
    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-build-${{ env.GO_VERSION }}-${{ hashFiles('**/go.sum') }}-v2
        restore-keys: |
          ${{ runner.os }}-go-build-${{ env.GO_VERSION }}-
          ${{ runner.os }}-go-build-
    
    - name: Download dependencies
      run: go mod download
    
    - name: Build binary
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
      run: |
        make build
        ls -la terraform-provider-n8n*